<div class="sign_in">
  <div class="text-center">
    <%= image_tag("logo.png", size: "100") %>
    <h3>Register account in KTIC</h3>
  </div>

  <%= form_for(resource, as: resource_name, url: registration_path(resource_name), :html => {:class => 'form_sign_in needs-validation' }) do |f| %>
    <%= render "devise/shared/error_messages", object: f.object %>

    <div class="row">
      <div class="col-md-12">
        <div class="field">
          <%= f.text_field :name, autofocus: true,  placeholder: "Your name", class: "input_reg custom-input" %>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-sm-6">
        <%= f.email_field :email, autofocus: true, autocomplete: "Your mail address", placeholder: "Email", class: "input_reg_your_email" %>
      </div>
      <div class="col-sm-6">
        <%= f.text_field :username, autofocus: true, autocomplete: "on", placeholder: "Username", class: "input_reg_username" %>

      </div>
    </div>
    <div class="row">
      <div class="col-md-12">
        <div class="field">
          <% if @minimum_password_length %>
            <%= f.password_field :password, autocomplete: "new-password", placeholder: "Password (#{@minimum_password_length } characters minimum)", class: "input_reg" %>
          <% end %><br/>
        </div>
      </div>
    </div>
    <div class="row">
      <div class="col-md-12">
        <div class="field">
          <% if @minimum_password_length %>
            <%= f.password_field :password, autocomplete: "new-password", placeholder: "Confirm your password", class: "input_reg" %>
          <% end %><br/>
        </div>
      </div>
    </div>
    <div class="actions text-center">
      <%= f.submit "Sign up" , class: "btn btn-success"%>
    </div>
  <% end %>

  <div class="text-center">
    <%= render "devise/shared/links" %>
  </div>
</div>
<script>
    // Example starter JavaScript for disabling form submissions if there are invalid fields
    (function() {
        'use strict';
        window.addEventListener('load', function() {
            // Fetch all the forms we want to apply custom Bootstrap validation styles to
            var forms = document.getElementsByClassName('needs-validation');
            // Loop over them and prevent submission
            var validation = Array.prototype.filter.call(forms, function(form) {
                form.addEventListener('submit', function(event) {
                    if (form.checkValidity() === false) {
                        event.preventDefault();
                        event.stopPropagation();
                    }
                    form.classList.add('was-validated');
                }, false);
            });
        }, false);
    })();
</script>